name: 'Determine Version'

on:
    workflow_call:
        inputs:
            branch: # id of input
                description: 'The name of the branch'
                required: true
                type: string
                default: ''
            default_version:
                description: 'The default release version'
                required: false
                type: string
                default: ''
            type:
                description: 'The release type'
                required: false
                default: 'prerelease/'
                type: string

        outputs:
            version:
                description: Returns the version from the branch name
                value: ${{ jobs.version.outputs.version }}
            setup-tag:
                description: Returns the tag for setups like Pre-Release, Hotfix
                value: ${{ jobs.version.outputs.setup-tag }}
            docker-tag:
                description: Returns the docker tag like prerelease, hotfix
                value: ${{ jobs.version.outputs.docker-tag }}
            major-version:
                description: Returns the major version
                value: ${{ jobs.version.outputs.major-version }}
            minor-version:
                description: Returns the minor version
                value: ${{ jobs.version.outputs.minor-version }}
            patch-level:
                description: Returns the patch version
                value: ${{ jobs.version.outputs.patch-level }}
            build-version:
                description: Returns the build version
                value: ${{ jobs.version.outputs.build-version }}

jobs:
    version:
        name: 'Determine Version'
        runs-on: ubuntu-latest

        outputs:
            version: ${{ steps.version.outputs.result }}
            setup-tag: ${{ steps.setup_tag.outputs.result }}
            docker-tag: ${{ steps.docker_tag.outputs.result }}
            major-version: ${{ steps.version_numbers.outputs.major }}
            minor-version: ${{ steps.version_numbers.outputs.minor }}
            patch-level: ${{ steps.version_numbers.outputs.patch }}
            build-version: ${{ steps.build.outputs.formattedTime }}

        steps:
            - name: Set Version
              id: version
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  result-encoding: string
                  script: |
                      let version = ''
                      let branchName = '${{ inputs.branch }}'

                      if (branchName == '') {
                        branchName = '${{ inputs.type }}${{ inputs.default_version }}'
                      }

                      if (branchName.indexOf('prerelease') > -1) {
                        return branchName.replace(/refs\/heads\/prerelease-/gi, '').replace(/refs\/tags\/prerelease-/gi, '').replace(/prerelease-/gi, '').replace(/refs\/heads\/prerelease\//gi, '').replace(/refs\/tags\/prerelease\//gi, '').replace(/prerelease\//gi, '')
                      } 

                      if (branchName.indexOf('hotfix') > -1) {
                        return branchName.replace(/refs\/heads\/hotfix-/gi, '').replace(/refs\/tags\/hotfix-/gi, '').replace(/hotfix-/gi, '').replace(/refs\/heads\/hotfix\//gi, '').replace(/refs\/tags\/hotfix\//gi, '').replace(/hotfix\//gi, '')
                      }

                      if (branchName.indexOf('release') > -1) {
                        return branchName.replace(/refs\/heads\/release-/gi, '').replace(/refs\/tags\/release-/gi, '').replace(/release-/gi, '').replace(/refs\/heads\/release\//gi, '').replace(/refs\/tags\/release\//gi, '').replace(/release\//gi, '')
                      }

                      if (version !== '' && version !== 'refs/heads/master') {
                        return version
                      }

                      return '${{ inputs.default_version }}'

            - name: Set Version Numbers
              id: version_numbers
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  result-encoding: string
                  script: |
                      const version = '1.0.0';
                      const [major, minor, patch] = version.split('.');

                      console.log(`Major: ${major}`);
                      console.log(`Minor: ${minor}`);
                      console.log(`Patch: ${patch}`);

                      core.setOutput('major', major);
                      core.setOutput('minor', minor);
                      core.setOutput('patch', patch);

            - name: Set Setup Tag
              id: setup_tag
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  result-encoding: string
                  script: |
                      let branchName = '${{ inputs.branch }}'

                      if (branchName == '') {
                        branchName = '${{ inputs.type }}${{ inputs.default_version }}'
                      }

                      if (branchName.indexOf('prerelease') > -1) {
                        return 'Pre-Release'
                      } 

                      if (branchName.indexOf('hotfix') > -1) {
                        return 'Hotfix'
                      }

                      branchName = '${{ inputs.type }}${{ inputs.default_version }}'

                      if (branchName.indexOf('prerelease') > -1) {
                        return 'Pre-Release'
                      } 

                      if (branchName.indexOf('hotfix') > -1) {
                        return 'Hotfix'
                      }

                      return ''

            - name: Set Docker Tag
              id: docker_tag
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  result-encoding: string
                  script: |
                      let branchName = '${{ inputs.branch }}'

                      if (branchName == '') {
                        branchName = '${{ inputs.type }}${{ inputs.default_version }}'
                      }

                      if (branchName.indexOf('prerelease') > -1) {
                        return 'prerelease'
                      } 

                      if (branchName.indexOf('hotfix') > -1) {
                        return 'hotfix'
                      }

                      if (branchName.indexOf('release') > -1) {
                        let version = branchName.replace(/refs\/heads\/release-/gi, '').replace(/refs\/tags\/release-/gi, '').replace(/release-/gi, '').replace(/refs\/heads\/release\//gi, '').replace(/refs\/tags\/release\//gi, '').replace(/release\//gi, '')

                        version = version.substring(0, version.indexOf('.') - 1);

                        return `${version}-latest`
                      }

                      branchName = '${{ inputs.type }}${{ inputs.default_version }}'

                      if (branchName.indexOf('prerelease') > -1) {
                        return 'prerelease'
                      } 

                      if (branchName.indexOf('hotfix') > -1) {
                        return 'hotfix'
                      }

                      return ''

            - name: Get current date
              id: build
              uses: josStorer/get-current-time@v2
              with:
                  format: MMDD

            - name: Log output
              run: |
                  echo "version: ${{ steps.version.outputs.result }}"
                  echo "setup-tag: ${{ steps.setup_tag.outputs.result }}"
                  echo "docker-tag: ${{ steps.docker_tag.outputs.result }}"
                  echo "version: ${{ steps.version.outputs.result }}"
                  echo "major-version: ${{ steps.version_numbers.outputs.major }}"
                  echo "minor-version: ${{ steps.version_numbers.outputs.minor }}"
                  echo "patch-level: ${{ steps.version_numbers.outputs.patch }}"
                  echo "build-version: ${{ steps.build.outputs.formattedTime }}"
